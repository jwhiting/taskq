import { Server } from "@modelcontextprotocol/sdk/server/index.js";
import { z } from "zod";
import { TaskStore } from "../../core/index.js";
import { 
  createTextResponse, 
  createJsonResponse, 
  createErrorResponse, 
  formatTable 
} from "../utils/responses.js";

/**
 * Get task tool definitions for tools/list handler  
 */
export function getTaskToolDefinitions() {
  return [
        {
          name: "add_task",
          description: "Add a new task to a queue",
          inputSchema: {
            type: "object",
            properties: {
              queue: {
                type: "string",
                description: "Queue name to add task to"
              },
              title: {
                type: "string", 
                description: "Task title"
              },
              description: {
                type: "string",
                description: "Task description"
              },
              priority: {
                type: "number",
                description: "Task priority (1-10, default 5)",
                minimum: 1,
                maximum: 10
              },
              parameters: {
                type: "object",
                description: "Task parameters as key-value pairs"
              },
              instructions: {
                type: "string",
                description: "Task-specific instructions"
              }
            },
            required: ["queue", "title"]
          }
        },
        {
          name: "update_task",
          description: "Update an existing task's properties",
          inputSchema: {
            type: "object", 
            properties: {
              task_id: {
                type: "number",
                description: "Task ID to update"
              },
              title: {
                type: "string",
                description: "New task title"
              },
              description: {
                type: "string", 
                description: "New task description"
              },
              priority: {
                type: "number",
                description: "New task priority (1-10)",
                minimum: 1,
                maximum: 10
              },
              parameters: {
                type: "object",
                description: "New task parameters as key-value pairs"
              },
              instructions: {
                type: "string",
                description: "New task-specific instructions"
              }
            },
            required: ["task_id"]
          }
        },
        {
          name: "checkout_task",
          description: "Checkout a task (by queue or specific task ID)",
          inputSchema: {
            type: "object",
            properties: {
              queue_or_task_id: {
                type: "string", 
                description: "Queue name (for next available task) or task ID (for specific task)"
              },
              worker_id: {
                type: "string",
                description: "Optional worker identifier"
              }
            },
            required: ["queue_or_task_id"]
          }
        },
        {
          name: "complete_task", 
          description: "Mark a task as completed",
          inputSchema: {
            type: "object",
            properties: {
              task_id: {
                type: "number",
                description: "Task ID to complete"
              }
            },
            required: ["task_id"]
          }
        },
        {
          name: "reset_task",
          description: "Reset a checked-out task back to pending",
          inputSchema: {
            type: "object",
            properties: {
              task_id: {
                type: "number", 
                description: "Task ID to reset"
              }
            },
            required: ["task_id"]
          }
        },
        {
          name: "fail_task",
          description: "Mark a task as failed",
          inputSchema: {
            type: "object",
            properties: {
              task_id: {
                type: "number",
                description: "Task ID to mark as failed"
              }
            },
            required: ["task_id"]
          }
        },
        {
          name: "delete_task",
          description: "Delete a task from the queue",
          inputSchema: {
            type: "object",
            properties: {
              task_id: {
                type: "number",
                description: "Task ID to delete"
              }
            },
            required: ["task_id"]
          }
        },
        {
          name: "list_tasks",
          description: "List tasks in a queue with optional status filter",
          inputSchema: {
            type: "object",
            properties: {
              queue: {
                type: "string",
                description: "Queue name to list tasks from"
              },
              status: {
                type: "string",
                description: "Filter by task status",
                enum: ["pending", "checked_out", "completed", "failed"]
              },
              limit: {
                type: "number",
                description: "Maximum number of tasks to return"
              }
            },
            required: ["queue"]
          }
        },
        {
          name: "inspect_task",
          description: "Get detailed information about a specific task",
          inputSchema: {
            type: "object",
            properties: {
              task_id: {
                type: "number",
                description: "Task ID to inspect"
              }
            },
            required: ["task_id"]
          }
        }
      ];
}

/**
 * Register task tool call handlers with the MCP server
 */
export function registerTaskTools(server: Server, taskStore: TaskStore) {
  // Task tool call handler
  server.setRequestHandler({ method: "tools/call" }, async (request) => {
    const { name, arguments: args } = request.params;

    try {
      switch (name) {
        case "add_task": {
          const validated = z.object({
            queue: z.string(),
            title: z.string(),
            description: z.string().optional(),
            priority: z.number().min(1).max(10).optional(),
            parameters: z.record(z.any()).optional(),
            instructions: z.string().optional()
          }).parse(args);

          const task = taskStore.addTask({
            queueName: validated.queue,
            title: validated.title,
            description: validated.description,
            priority: validated.priority,
            parameters: validated.parameters,
            instructions: validated.instructions
          });
          
          return createJsonResponse({
            success: true,
            message: `Task '${validated.title}' added to queue '${validated.queue}'`,
            task
          });
        }

        case "update_task": {
          const validated = z.object({
            task_id: z.number(),
            title: z.string().optional(),
            description: z.string().optional(), 
            priority: z.number().min(1).max(10).optional(),
            parameters: z.record(z.any()).optional(),
            instructions: z.string().optional()
          }).parse(args);

          const task = taskStore.updateTask(validated.task_id, {
            title: validated.title,
            description: validated.description,
            priority: validated.priority,
            parameters: validated.parameters,
            instructions: validated.instructions
          });
          
          return createJsonResponse({
            success: true,
            message: `Task ${validated.task_id} updated successfully`,
            task
          });
        }

        case "checkout_task": {
          const validated = z.object({
            queue_or_task_id: z.string(),
            worker_id: z.string().optional()
          }).parse(args);

          // Check if it's a number (task ID) or string (queue name)
          const isTaskId = /^\d+$/.test(validated.queue_or_task_id);
          
          let task;
          if (isTaskId) {
            task = taskStore.checkoutTask(parseInt(validated.queue_or_task_id), validated.worker_id);
          } else {
            task = taskStore.checkoutTask(validated.queue_or_task_id, validated.worker_id);
          }
          
          if (!task) {
            throw new Error("No tasks available to checkout");
          }
          
          return createJsonResponse({
            success: true,
            message: `Task ${task.id} checked out successfully`,
            task
          });
        }

        case "complete_task": {
          const validated = z.object({
            task_id: z.number()
          }).parse(args);

          const task = taskStore.completeTask(validated.task_id);
          
          return createJsonResponse({
            success: true,
            message: `Task ${validated.task_id} marked as completed`,
            task
          });
        }

        case "reset_task": {
          const validated = z.object({
            task_id: z.number()
          }).parse(args);

          const task = taskStore.resetTask(validated.task_id);
          
          return createJsonResponse({
            success: true,
            message: `Task ${validated.task_id} reset to pending`,
            task
          });
        }

        case "fail_task": {
          const validated = z.object({
            task_id: z.number()
          }).parse(args);

          const task = taskStore.failTask(validated.task_id);
          
          return createJsonResponse({
            success: true,
            message: `Task ${validated.task_id} marked as failed`,
            task
          });
        }

        case "delete_task": {
          const validated = z.object({
            task_id: z.number()
          }).parse(args);

          taskStore.deleteTask(validated.task_id);
          
          return createJsonResponse({
            success: true,
            message: `Task ${validated.task_id} deleted successfully`
          });
        }

        case "list_tasks": {
          const validated = z.object({
            queue: z.string(),
            status: z.enum(["pending", "checked_out", "completed", "failed"]).optional(),
            limit: z.number().optional()
          }).parse(args);

          const tasks = taskStore.listTasks(validated.queue, validated.status, validated.limit);
          
          if (tasks.length === 0) {
            return createTextResponse(`No tasks found in queue '${validated.queue}'${validated.status ? ` with status '${validated.status}'` : ''}.`);
          }

          const headers = ["ID", "Title", "Status", "Priority", "Created"];
          const rows = tasks.map(task => [
            task.id.toString(),
            task.title.substring(0, 50) + (task.title.length > 50 ? "..." : ""),
            task.status,
            task.priority.toString(),
            new Date(task.createdAt).toLocaleString()
          ]);

          const table = formatTable(headers, rows);
          return createTextResponse(`Tasks in queue '${validated.queue}':\n\n${table}`);
        }

        case "inspect_task": {
          const validated = z.object({
            task_id: z.number()
          }).parse(args);

          const task = taskStore.getTask(validated.task_id);
          if (!task) {
            throw new Error(`Task ${validated.task_id} not found`);
          }
          
          return createJsonResponse({
            success: true,
            task
          });
        }

        default:
          return null; // Let other handlers process unknown tools
      }
    } catch (error) {
      return createErrorResponse(error as Error);
    }
  });
}